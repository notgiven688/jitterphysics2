---
sidebar_position: 0
---

# Jitter World

A brief overview of the world and its functions.

## World class constructor

The world class takes three optional arguments, with quite large default values:

```cs
public World(int numBodies = 32768, int numContacts = 65536, int numConstraints = 32768)
```

These values specify the maximum number of entities which can live in the world class.
For a managed library this is unusual, since the user has to commit to a certain
maximum size of the simulation. The parameters can not be changed after calling the constructor.

- **numBodies** The maximum number of **RigidBodies** in the simulation. RigidBodies have a position, velocity, mass, inertia and
also own a list of shapes, which live in the collision system of the engine. 
- **numContacts** Collisions reported by the collision system are used to build contact manifolds between shapes.
A contact manifold consists of one to four collsion points. The collision points for a pair of shapes are stored
in a datastructure called "Arbiter". Each pair of shapes can only have one Arbiter. numContacts actually refers to the maximum number of **Arbiters**.
- **numConstraint** refers to the maximum number of **Constraints**. A constraint constraints the positions or velocities of a pair of rigid bodies.



### Accessing raw memory

`world.RawData` can be used to access `Span`s into unmanaged contionous memory. Jitter stores data of RigidBodies, Arbiters and Constraints in the unmanaged
structures `RigidBodyData`, `ContactData` and `ConstraintData`.


:::danger Raw Memory Access
Accessing raw memory should not be necessary when using the standard functionalities in Jitter. 
Reading the raw data of objects currently registered in an instance of the world class via `world.RawData` is safe in general,
while modifying data can corrupt the internal state of the engine.
:::danger

### Removing entities

The `world.Remove` function has overloads for removing instances of `RigidBody`, `Arbiter` and `Constraint`.

Removing a rigid body also removes all constraints and contacts the body is involved.

:::caution Accessing removed entities
Instances of `RigidBody`, `Arbiter` and `Constraint` store some of their data in unmanaged memory which is automatically
freed once the entities got removed from the world. Do not use these entities any longer, i.e. do not call function or use their properties, otherwise a NullReferenceException may be thrown.
:::caution


## Raycasting

## Contact generation

### Collision Filters

#### Narrowphase filter

#### Broadphase filter

### Auxiliary contacts

### Speculative contacts

## Collision Islands



