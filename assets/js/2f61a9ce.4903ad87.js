"use strict";(self.webpackChunkjitterphysics=self.webpackChunkjitterphysics||[]).push([[734],{4543:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>r,default:()=>h,frontMatter:()=>a,metadata:()=>s,toc:()=>d});var o=n(4848),i=n(8453);const a={sidebar_position:3},r="Hello World",s={id:"quickstart/teapots/pointcloudshape",title:"Hello World",description:"Creating the PointCloudShape",source:"@site/docs/01_quickstart/02_teapots/03-pointcloudshape.md",sourceDirName:"01_quickstart/02_teapots",slug:"/quickstart/teapots/pointcloudshape",permalink:"/docs/quickstart/teapots/pointcloudshape",draft:!1,unlisted:!1,editUrl:"https://github.com/notgiven688/jitterphysics2/tree/main/docs/docs/01_quickstart/02_teapots/03-pointcloudshape.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Hull Sampling",permalink:"/docs/quickstart/teapots/hull-sampling"},next:{title:"Aftermath",permalink:"/docs/quickstart/teapots/aftermath"}},l={},d=[{value:"Creating the <code>PointCloudShape</code>",id:"creating-the-pointcloudshape",level:3},{value:"Creating Multiple Instances of the Same Shape",id:"creating-multiple-instances-of-the-same-shape",level:4},{value:"Putting it all together",id:"putting-it-all-together",level:3}];function c(e){const t={admonition:"admonition",code:"code",h1:"h1",h3:"h3",h4:"h4",header:"header",img:"img",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(t.header,{children:(0,o.jsx)(t.h1,{id:"hello-world",children:"Hello World"})}),"\n",(0,o.jsxs)(t.h3,{id:"creating-the-pointcloudshape",children:["Creating the ",(0,o.jsx)(t.code,{children:"PointCloudShape"})]}),"\n",(0,o.jsxs)(t.p,{children:["We can now create a ",(0,o.jsx)(t.code,{children:"PointCloudShape"})," from the sampled vertices:"]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-cs",metastring:"Program.cs showLineNumbers",children:"// find a few points on the convex hull of the teapot.\nvar vertices = ShapeHelper.SampleHull(allVertices, subdivisions: 3);\n\n// use these points to create a PointCloudShape.\nvar pointCloudShape = new PointCloudShape(vertices);\n"})}),"\n",(0,o.jsxs)(t.p,{children:["However, we need to be a bit careful here.\nIf we add this shape to a rigid body as-is, the body may not behave as intuitively expected.\nThis is because the center of mass of a rigid body is always located at ",(0,o.jsx)(t.code,{children:"(0, 0, 0)"})," in its local coordinate frame."]}),"\n",(0,o.jsxs)(t.p,{children:["If you open ",(0,o.jsx)(t.code,{children:"teapot.obj"})," in a model editor, you'll notice that the model is not centered around the origin.\nTo correct this, we either need to center the model manually in a model editor\u2014or, more conveniently, use the ",(0,o.jsx)(t.code,{children:"Shift"})," property of ",(0,o.jsx)(t.code,{children:"PointCloudShape"})," to align the center of mass with the origin:"]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-cs",metastring:"Program.cs showLineNumbers",children:"// find a few points on the convex hull of the teapot.\nvar vertices = ShapeHelper.SampleHull(allVertices, subdivisions: 3);\n\n// use these points to create a PointCloudShape.\nvar pointCloudShape = new PointCloudShape(vertices);\n\n// shift the shape so its center of mass is at the origin.\npointCloudShape.GetCenter(out JVector centerOfMass);\npointCloudShape.Shift = -centerOfMass;\n\n// pointCloudShape.GetCenter(out centerOfMass); // now returns (0, 0, 0)\n\n// finally, create the rigid body for the teapot\nvar rigidBody = world.CreateRigidBody();\nrigidBody.AddShape(pointCloudShape);\n"})}),"\n",(0,o.jsx)(t.admonition,{type:"warning",children:(0,o.jsx)(t.p,{children:"The shift applied to the shape must also be taken into account when rendering the model, to ensure it aligns visually with the simulation."})}),"\n",(0,o.jsx)(t.h4,{id:"creating-multiple-instances-of-the-same-shape",children:"Creating Multiple Instances of the Same Shape"}),"\n",(0,o.jsxs)(t.p,{children:["In Jitter, it is not valid to add the same shape instance to multiple rigid bodies.\nTo create additional instances of a shape, use the ",(0,o.jsx)(t.code,{children:"Clone()"})," method of ",(0,o.jsx)(t.code,{children:"PointCloudShape"}),"."]}),"\n",(0,o.jsx)(t.p,{children:"This method creates a new shape object that shares the underlying data structure, saving both memory and computation time:"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-cs",children:"var shapeInstance1 = new PointCloudShape(vertices);\nvar shapeInstance2 = shapeInstance1.Clone(); // Safe to use in a second body\n"})}),"\n",(0,o.jsx)(t.p,{children:"This approach is especially useful when many bodies share the same geometry, such as multiple identical props or characters in a simulation."}),"\n",(0,o.jsx)(t.h3,{id:"putting-it-all-together",children:"Putting it all together"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-cs",metastring:"Program.cs showLineNumbers",children:'using System.Numerics;\nusing Raylib_cs;\nusing Jitter2;\nusing Jitter2.Collision.Shapes;\nusing Jitter2.Dynamics;\nusing Jitter2.LinearMath;\nusing static Raylib_cs.Raylib;\n\nstatic Matrix4x4 GetRayLibTransformMatrix(RigidBody body)\n{\n    JMatrix ori = JMatrix.CreateFromQuaternion(body.Orientation);\n    JVector pos = body.Position;\n\n    return new Matrix4x4(ori.M11, ori.M12, ori.M13, pos.X,\n                         ori.M21, ori.M22, ori.M23, pos.Y,\n                         ori.M31, ori.M32, ori.M33, pos.Z,\n                         0, 0, 0, 1.0f);\n}\n\nstatic Texture2D GenCheckedTexture(int size, int checks, Color colorA, Color colorB)\n{\n    Image imageMag = GenImageChecked(size, size, checks, checks, colorA, colorB);\n    Texture2D textureMag = LoadTextureFromImage(imageMag);\n    UnloadImage(imageMag);\n    return textureMag;\n}\n\nconst int numberOfTeapots = 12;\n\n// set a hint for anti-aliasing\nSetConfigFlags(ConfigFlags.Msaa4xHint);\n\n// initialize a 1200x800 px window with a title\nInitWindow(1200, 800, "TeaDrop example");\n\n// dynamically create a plane model\nTexture2D texture = GenCheckedTexture(10, 1,  Color.LightGray, Color.Gray);\nModel planeModel = LoadModelFromMesh(GenMeshPlane(20, 20, 10, 10));\nSetMaterialTexture(ref planeModel, 0, MaterialMapIndex.Diffuse, ref texture);\n\n// load the teapot model from file\nModel teapotModel = LoadModel("teapot.obj");\n\n// load the mesh vertices\nif (teapotModel.MeshCount == 0)\n    throw new Exception("Model could not be loaded!");\n\nMesh teapotMesh;\nunsafe { teapotMesh = teapotModel.Meshes[0]; }\nvar allVertices = teapotMesh.VerticesAs<JVector>();\n\n// sample vertices on the convex hull\nvar vertices = ShapeHelper.SampleHull(allVertices.ToArray(), 4);\n\n// create the PointCloudShape from the reduced vertices\nvar pointCloudShape = new PointCloudShape(vertices);\n\n// shift the shape, such that the center of mass is at the origin\npointCloudShape.GetCenter(out JVector center);\npointCloudShape.Shift = -center;\n\n// we need to take the transpose here, since Raylib and System.Numerics\n// use a different convention\nMatrix4x4 shift = Matrix4x4.CreateTranslation(-center);\nshift = Matrix4x4.Transpose(shift);\n\ntexture = GenCheckedTexture(16, 2,  Color.White, Color.Magenta);\nMaterial teapotMat = LoadMaterialDefault();\nSetMaterialTexture(ref teapotMat, MaterialMapIndex.Diffuse, texture);\n\n// initialize the Jitter physics world\nWorld world = new ();\nworld.SubstepCount = 4;\n\n// add a body representing the plane\nRigidBody planeBody = world.CreateRigidBody();\nplaneBody.AddShape(new BoxShape(20));\nplaneBody.Position = new JVector(0, -10, 0);\nplaneBody.MotionType = MotionType.Static;\n\n// add numberOfTeapots teapots\nfor(int i = 0; i < numberOfTeapots; i++)\n{\n    RigidBody body = world.CreateRigidBody();\n    body.AddShape(pointCloudShape.Clone());\n    body.Position = new JVector(0, i * 4 + 0.5f, 0);\n}\n\n// create a camera\nCamera3D camera = new ()\n{\n    Position = new Vector3(-40.0f, 16.0f, 20.0f),\n    Target = new Vector3(0.0f, 4.0f, 0.0f),\n    Up = new Vector3(0.0f, 1.0f, 0.0f),\n    FovY = 45.0f,\n    Projection = CameraProjection.Perspective\n};\n\n// 100 fps target\nSetTargetFPS(100);\n\n// simple render loop\nwhile (!WindowShouldClose())\n{\n    BeginDrawing();\n    ClearBackground(Color.Blue);\n\n    BeginMode3D(camera);\n\n    DrawModel(planeModel, Vector3.Zero, 1.0f, Color.White);\n\n    world.Step(1.0f / 100.0f, true);\n\n    foreach(var body in world.RigidBodies)\n    {\n        if (body == planeBody || body == world.NullBody) continue; // do not draw this\n        DrawMesh(teapotMesh, teapotMat, GetRayLibTransformMatrix(body) * shift);\n    }\n\n    EndMode3D();\n    DrawText($"{GetFPS()} fps", 10, 10, 20, Color.White);\n\n    EndDrawing();\n}\n\nCloseWindow();\n'})}),"\n",(0,o.jsx)(t.p,{children:(0,o.jsx)(t.img,{alt:"plane",src:n(6645).A+"",width:"1188",height:"791"})})]})}function h(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(c,{...e})}):c(e)}},6645:(e,t,n)=>{n.d(t,{A:()=>o});const o=n.p+"assets/images/teapots-828d7a60e2c8d41b03862af6694c9472.gif"},8453:(e,t,n)=>{n.d(t,{R:()=>r,x:()=>s});var o=n(6540);const i={},a=o.createContext(i);function r(e){const t=o.useContext(a);return o.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function s(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),o.createElement(a.Provider,{value:t},e.children)}}}]);